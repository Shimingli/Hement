apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.shiming.hement"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        // timber 的配置  debuggable
        release {
            minifyEnabled false
            debuggable  false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // rxpermissions 
    implementation "com.github.tbruyelle:rxpermissions:0.10.2"
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'
    //dagger2
    api "com.google.dagger:dagger:2.15"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28' //必须需要的 对于 dagger
    annotationProcessor "com.google.dagger:dagger-compiler:2.15"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:2.15"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:2.15"

    // Dagger Android
    annotationProcessor "com.google.dagger:dagger-android-processor:2.15"
    implementation "com.google.dagger:dagger-android-support:2.15"
    // 如果您不使用支持库，请改为包含它
    implementation "com.google.dagger:dagger-android:2.15"

//    implementation project(':network')
    api project(':network')
    api project(':imageloader')
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

//    api ("com.squareup.sqlbrite2:sqlbrite:3.2.0") {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    }


    api  "com.jakewharton.rxrelay2:rxrelay:2.0.0"
    //logger
    api 'com.orhanobut:logger:2.2.0'
    //微信的xlog
    api 'com.elvishew:xlog:1.6.1'
    //美团的Logan
    api 'com.dianping.android.sdk:logan:1.1.0'



     //就是那个生命周期的问题 还是不要用 为好
//    api 'com.trello.rxlifecycle3:rxlifecycle:3.0.0'
//
//// If you want to bind to Android-specific lifecycles
//    api 'com.trello.rxlifecycle3:rxlifecycle-android:3.0.0'
//
//// If you want pre-written Activities and Fragments you can subclass as providers
//    api 'com.trello.rxlifecycle3:rxlifecycle-components:3.0.0'


}
repositories {
    mavenCentral()
}
